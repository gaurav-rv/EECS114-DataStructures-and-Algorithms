Analysis Text.

Remove Function:(int)
Best Case: Remove the very first element: C1 + C2 +C3;
Average Case: the middle element :  C1 + C2 +C3 + C4 + c5(n/2)+ c6(n-1)/2+ c7(n-1)/2 +c8 +c9;
Worst Case: the last element: C1 + C2+ C3+ C4 + c5(n) + c6(n-1) +c7(n-1)+c8+ c9;


Remove Function: char 

Best Case: Remove the very first element: C1 + C2 +C3 + c4 + c5;
Average Case: C1 + C2 + c3(n/2)+ c4(n-1)/2+ c5(n-1)/2 +c6 +c7;
Worst Case: Element does not exsist. Goes through every element:C1+ C2+ C3 + c4(n) + c5(n-1) +c6(n-1)+c7+ c8;

Remove All : char
Best Case Worst Case and Aerage Case is the same as it has to go through every element in the list
C1 + C2+ C3+ C4 + c5(n) + c6(n-1) +c7(n-1)+ c8(n-1) + C9 + c10;


Node Previous:
Best: Head element: c1+ c2 +c3
Average: Middle element: c1 +c2 + c3(n)/2 + c4(n-1)/2 +c5(n-1)/2+ c6;
Last:  The very last element: c1+c2+c3(n) + c4(n-1) + c5(n-1) +c6;

Node Next:
Best, Middle and worst is the same as we can just call the next element.
c1+c2+c3;

Contains:
Best case : First element c1+c2+C3+c4;
Average Case : Middle element: c1+c2+C3 + c4(n)/2 + c5(n-1)/2+ c6(n-1)/2 +c7+c8;
Worst Case: Last Element c1+c2+C3 + c4(n) + c5(n-1)+ c6(n-1) +c7+c8;

Get & set Function Char:
Best: element is 0: c1+c2+c3+c4;
Average Case:c1+C2+c3 +c4(n/2) +c5(n-1)/2+ c6(n-1)/2 +c6(n-1)/2 + c7(n-1)/2 +c8;
Worst: c1+C2+c3 +c4(n/2) +c5(n-1)+ c6(n-1) +c6(n-1) + c7(n-1) +c8

Equals:
Best Worse and Average are the same as we are comparing to lists
c1+c2+c3+c4+c5(n)+c6(n-1)/2 + c7(n-1)/2 + c8 

Push Front :
Best average and worst is the same because the first element remains first element
c1+c2+C3+c4;

Push Back : 
Best average and worst is also the same for this as we are adding element to the last node.
c1+c2+c3(n) +c4(n-1) +C5+c6;

Pop Front: 
Best = avg = worse;
C1+c2+c3;

Pop Back:
Best = avg = worse;
c+c2+c3+c4(n) +c5(n-1) +c6;

Swap:
Best case: Swap head and head :
c1+C2+c3+c4+ c5(n) + c6(n-1) +c7+c8(n) + c9(n-1) + c10 +c11 +c12;

Worst case:Swap Tail and tail
c1+c2+C3+C4(n)+c5(n-1)+c6(n-1)+c7(n-1) + c8 + c9 + c10(n) +c11(n-1) +c12(n-1) +c13(n-1) +c14+c15+c16;

Insert at Pos:
Best case :c1+c2+C3+C4+c5;
Average case: in between- c1+c2+C3+c4+c5(n-1)/2 +c6(n-2)/2 + c7(n-2)/2 +c8(n-2)/2 +c9+c10+c11+c12;
Worst case: at the end. - c1+c2+C3+c4+c5(n-1) +c6(n-2) + c7(n-2) +c8(n-2) +c9+c10+c11+c12;

Insert After
Best: Empty List: c1+c2+c3;
Average: in the middle :c1+c2+C3+c4+c5(n)/2 +c6(n-1)/2 + c7(n-1)/2 +c8(n-1)/2 +c9+c10+c11+c12;
End: c1+c2+C3+c4+c5(n) +c6(n-1) + c7(n-1) +c8(n-1) +c9+c10+c11+c12;

InsetBefore :
Best: Empty List : c1+C2+c3;
Average: Middle +1: c1+c2+C3+c4+c5(n+1)/2 +c6(n)/2 + c7(n)/2 +c8(n)/2 +c9+c10+c11+c12

SubList:
Best: 0 to 1: c1+c2+c3+C4+c5+c6+c7+c8+c9+c10+c11;
Worst: 0 - n element:  c1+c2+c3+C4+c5+c6+c7+c8+c9(n)+c10(n-1) +c11(n-1) +c12;

Find:
Best:1st char : c1+c2+C3+C4+C5+C6;
Worst: Nth Char : C1+c2+C3 + c4(n)+c5(n-1) +c6(n-1) +c7(n-1)

To Array: 
Best,Average, Worse:C1+c2+c3+C4+c5(n)+ c6(n-1)+c7(n-1)+c8(n-1)+c9;

Size()
Best Worse Average: C1+c2+C3+c4(n)+c5(n-1)+c6(n-1)+c7

Print()

BEst Worst Average:
C1+c2(n)+c3(n-1)+c4(n-1)

TO String 
BEst, Worse,Average:
c1+c2+C3;

 